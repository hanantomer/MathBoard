import{U as C,W as v,aw as m,Y as p,aH as w,_ as y,g as S,K as h,r as T,E as l,a3 as V}from"./index-83a93b04.js";const E=C({fluid:{type:Boolean,default:!1},...v(),...m()},"VContainer"),P=p()({name:"VContainer",props:E(),setup(s,n){let{slots:u}=n;const{rtlClasses:i}=w();return y(()=>S(s.tag,{class:["v-container",{"v-container--fluid":s.fluid},i.value,s.class],style:s.style},u)),{}}}),o=V(),b=h("lesson",()=>{let s=T(new Map),n={};function u(){return n}function i(){return s}async function c(){const e=l();let t=null;e.isTeacher()?t=await o.getTeacherLessons(e.getCurrentUser().uuid):t=await o.getStudentLessons(e.getCurrentUser().uuid),t.forEach(a=>{s.value.set(a.uuid,a)})}async function d(e){if(s.value.get(e)||await c(),!s.value.get(e))throw TypeError("invalid lesson:"+e);n=s.value.get(e)}async function f(e){const t=l();let a={name:e,user:t.getCurrentUser()},r=await o.addLesson(a);return s.value.set(r.uuid,r),await d(r.uuid),r}async function L(){const e=l();await o.addLessonToSharedLessons(n.uuid,e.getCurrentUser().uuid)}function g(e){s.value.forEach(t=>{t.uuid===e&&s.value.delete(t.uuid)})}return{getLessons:i,getCurrentLesson:u,loadLessons:c,setCurrentLesson:d,addLesson:f,addLessonToSharedLessons:L,removeLesson:g}});export{P as V,b as u};
